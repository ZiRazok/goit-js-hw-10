{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputDate = document.querySelector(\"#datetime-picker\");\nconst btnStart = document.querySelector('[data-start]');\n\nlet userSelectedDate = 0;\nlet intervalId;\n\nconst dataTimer = {\n    days: document.querySelector(\"[data-days]\"),\n    hours: document.querySelector(\"[data-hours]\"),\n    minutes: document.querySelector(\"[data-minutes]\"),\n    seconds: document.querySelector(\"[data-seconds]\")\n}\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        console.log(selectedDates[0]);\n        if (selectedDates[0] < new Date()) {\n            iziToast.warning({\n                message: 'Please choose a date in the future',\n                position: \"topRight\",\n                theme: 'dark',\n                backgroundColor: '#ef4040'\n            });\n        }\n        else {\n            if (userSelectedDate != selectedDates[0].getTime()) {\n                clearInterval(intervalId);\n                userSelectedDate = selectedDates[0].getTime();\n                btnStart.disabled = false;\n            }\n        };\n    },\n};\nflatpickr(inputDate, options);\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n};\n\nbtnStart.addEventListener(\"click\", () => {\n    btnStart.disabled = true;\n    intervalId = setInterval(() => {\n        console.log(convertMs(userSelectedDate - new Date().getTime()));\n        const reverseTimer = convertMs(userSelectedDate - new Date().getTime());\n        if (reverseTimer.days == 0 && reverseTimer.hours == 0 && reverseTimer.minutes == 0 && reverseTimer.seconds == 0)\n            clearInterval(intervalId);\n        for (const key in dataTimer) {\n            if (reverseTimer.hasOwnProperty(key)) dataTimer[key].textContent = String(reverseTimer[key]).padStart(2, \"0\");\n        }\n    }, 1000)\n});"],"names":["inputDate","btnStart","userSelectedDate","intervalId","dataTimer","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","reverseTimer","key"],"mappings":"2GAKA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,cAAc,EAEtD,IAAIC,EAAmB,EACnBC,EAEJ,MAAMC,EAAY,CACd,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACpD,EACMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAI,IAAI,KACvBC,EAAS,QAAQ,CACb,QAAS,qCACT,SAAU,WACV,MAAO,OACP,gBAAiB,SACjC,CAAa,EAGGL,GAAoBI,EAAc,CAAC,EAAE,QAAO,IAC5C,cAAcH,CAAU,EACxBD,EAAmBI,EAAc,CAAC,EAAE,QAAO,EAC3CL,EAAS,SAAW,GAG/B,CACL,EACAO,EAAUR,EAAWK,CAAO,EAE5B,SAASI,EAAUC,EAAI,CAMnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEAb,EAAS,iBAAiB,QAAS,IAAM,CACrCA,EAAS,SAAW,GACpBE,EAAa,YAAY,IAAM,CAC3B,QAAQ,IAAIM,EAAUP,EAAmB,IAAI,OAAO,QAAS,CAAA,CAAC,EAC9D,MAAMa,EAAeN,EAAUP,EAAmB,IAAI,KAAM,EAAC,QAAO,CAAE,EAClEa,EAAa,MAAQ,GAAKA,EAAa,OAAS,GAAKA,EAAa,SAAW,GAAKA,EAAa,SAAW,GAC1G,cAAcZ,CAAU,EAC5B,UAAWa,KAAOZ,EACVW,EAAa,eAAeC,CAAG,IAAGZ,EAAUY,CAAG,EAAE,YAAc,OAAOD,EAAaC,CAAG,CAAC,EAAE,SAAS,EAAG,GAAG,EAEnH,EAAE,GAAI,CACX,CAAC"}